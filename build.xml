<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright 2010-2011 Vodafone Group Services GmbH
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
		http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->
<project name="jil-api-tests" default="default">

	<description>
		Packages the jil-api-test widgets
	</description>
	
	<!-- include antcontrib to enable additional tasks like foreach or popertyregexp -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${basedir}/util/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<!-- set some directories -->
	<property name="dist" location="dist/unsigned"/>
	<property name="src" location="src"/>
	<property name="test-src" location="${src}/tests" />
	<property name="util-src" location="${src}/util" />
	<property name="tmp" location="_tmp_" description="temporary folder to use, during build-process"/>
	<tstamp>
		<format property="widget.version.suffix" pattern=".yyyyMMddhhmm"/>
		<!--
			appending the current date/time to the version makes updating the widget
			much easier on Samsung/VF 360 phones.
		-->
	</tstamp>

	<target name="-collectTestNames">
		<fileset id="tests.contents" dir="${test-src}/" includes="**/*.js" excludes="**/*.config.xml.js **/*.index.html.js" />
		<property name="test.names" refid="tests.contents"/>
		<propertyregex override="true" property="test.names" input="${test.names}" regexp="\.js" replace="" global="true"/>
		<propertyregex override="true" property="test.names" input="${test.names}" regexp="\\" replace="/" global="true"/>
	</target>

	<target name="-setFileNameForTest">
		<property name="test.filename" value="${dist-filename-prefix}${test}" />
		<propertyregex override="true" property="test.filename" input="${test.filename}" regexp="/" replace="-" global="true"/>
	</target>
	<!-- *** internal targets ***-->

	<!-- Fills template files with concrete values -->
	<target name="specializeTemplates" depends="createTemp, -setFileNameForTest">
		<!--
			Do the E4X magic, which means throw config.xml.tpl/index.html.tpl into a Rhino (js.jar) and
			let it create config.xml/index.html.
		-->
		
		<!-- index.html -->
		
		<property name="_tmp" value="${testfile}" />
		<propertyregex override="true" property="_tmp" input="${_tmp}" regexp="\.js$" replace=".index.html.js" global="true"/>
		<available file="${_tmp}" type="file" property="indexHtmlJsAvail" value="true"/>
		
		<!-- check if {test}.index.html.js-file for given test is available (use default if not)-->
		<if>
			<isset property="indexHtmlJsAvail" />
			<then>
				<property name="indexHtmlJsFileName" value="${_tmp}"/>
			</then>
			<else>
				<property name="indexHtmlJsFileName" value="${src}/index.html.js"/>
			</else>
		</if>

		<java jar="tools/js.jar" fork="true">
			<!-- list all the js files here in the order they need to be loaded -->
			<arg line="-f tools/js/console.js"/>
			<arg line="-f tools/js/util.js"/>
			<arg line="-f tools/js/config.js"/>
			<arg line="-f tools/js/xmlHelper.js"/>
			<!--<arg value="src/tests/base/widget-update/update0.config.xml.js"/>-->
			<arg line="-f ${indexHtmlJsFileName}"/>
			<arg line="-f tools/js/file.js"/>
			<arg line="tools/js/writeRenderedFile.js"/>
			<!--arguments passed to the Rhino-->
			
			<!-- The complete path to the src directory and the file. -->
			<arg line="${src}/index.html"/>
			<!-- The JavaScript test file, e.g. /src/tests/base/window.js -->
			<arg line="${testfile}"/>
		</java>
		<!-- copy the index.html that got generated by the above JS script -->
		<copy file="${src}/index.html" todir="${tmp}"/>
		<delete file="${tmp}/index.html.tpl"/>
		
		<!-- Create the whatever-test-name.html, by copying the index.html into it. -->
		<propertyregex override="true" property="_htmlDestFile" input="${test}" regexp="/" replace="-" global="true"/>
		<copy file="${src}/index.html" tofile="${src}/tests-${_htmlDestFile}.html"/>
		
		<!-- config.xml -->
		
		<property name="_tmp1" value="${testfile}" />
		<propertyregex override="true" property="_tmp1" input="${_tmp1}" regexp="\.js$" replace=".config.xml.js" global="true"/>
		<available file="${_tmp1}" type="file" property="configXmlJsAvail" value="true"/>
		
		<!-- check if {test}.config.xml.js-file for given test is available (use default if not)-->
		<if>
			<isset property="configXmlJsAvail" />
			<then>
				<property name="configXmlJsFileName" value="${_tmp1}"/>
			</then>
			<else>
				<property name="configXmlJsFileName" value="${src}/config.xml.js"/>
			</else>
		</if>

		<java jar="tools/js.jar" fork="true">
			<!-- list all the js files here in the order they need to be loaded -->
			<arg line="-f tools/js/console.js"/>
			<arg line="-f tools/js/util.js"/>
			<arg line="-f tools/js/config.js"/>
			<arg line="-f tools/js/xmlHelper.js"/>
			<!--<arg value="src/tests/base/widget-update/update0.config.xml.js"/>-->
			<arg line="-f ${configXmlJsFileName}"/>
			<arg line="-f tools/js/file.js"/>
			<arg line="tools/js/writeRenderedFile.js"/>
			<!--arguments passed to the Rhino-->
			
			<!-- The complete path to the src directory and the file. -->
			<arg line="${src}/config.xml"/>
			<!-- The JavaScript test file, e.g. /src/tests/base/window.js -->
			<arg line="${testfile}"/>
		</java>
		<!-- copy the config.xml that got generated by the above JS script -->
		<copy file="${src}/config.xml" todir="${tmp}"/>
		<delete file="${tmp}/config.xml.tpl"/>
	</target>

	<!-- create test-widget from temporary folder -->
	<target name="createWgt" depends="specializeTemplates, createTemp, -setFileNameForTest">
		<mkdir dir="${dist}"/>
		<zip destfile="${dist}/${test.filename}.wgt">
			<fileset dir="${tmp}">
				<include name="**/*"/>
			</fileset>
		</zip>
		<!-- do cleanup -->
		<delete dir="${tmp}"/>
	</target>

    <!-- create temporary-folder -->
    <target name="createTemp">
        <mkdir dir="${tmp}"/>
        <copy todir="${tmp}">
            <fileset dir="${src}">
                <include name="css/*"/>
                <include name="img/*"/>
                <include if="isAudio" name="**/test-audio/**"/>
                <include if="isAudioMp3Only" name="**/test-audio/mp3/*"/>
                <include if="isVideo" name="**/test-video/**"/>
                <include name="**/${script-src-prefix-path}${test}.js"/>
                <include name="**/${script-src-prefix-path}${test}.css"/>
                <include name="js/doh2/*.js"/>
                <include name="js/*.js"/>
				<!-- Make sure the compat is NOT in there!!! -->
                <exclude name="**/js/compat.js"/>
            </fileset>
        </copy>
    </target>

    <!-- writes the available tests to the console -->
	<target name="echoTestfiles" depends="-collectTestNames">
		<echo>${line.separator}### Available tests ###${line.separator}</echo>
		<for list="${test.names}" param="test.name" delimiter=";">
			<sequential>
				<echo>@{test.name}</echo>
			</sequential>
		</for>
		<echo>${line.separator}</echo>
    </target>

	<!-- *** public targets (see description for details) *** -->
	<target name="build" description="This target asks for a test to be build as a widget (and then, of course builds this widget).">
		<echo level="info">### Building single test ###</echo>
			<if>
				<not><isset property="test" /></not>
				<then>
					<if>
						<isset property="util" />
						<then>
							<property name="test" value="${util}"/>
							<property name="testfile" location="${util-src}/${util}.js"/>
							<property name="script-src-prefix-path" value="util/"/>
							<property name="dist-filename-prefix" value="util-" />
						</then>
						<else>
							<property name="testfile" location="${test-src}/${test}.js"/>
							<property name="script-src-prefix-path" value="tests/"/>
							<property name="dist-filename-prefix" value="test-" />
							<antcall target="echoTestfiles" />
							<!-- fetch name of test to build -->
							<input addproperty="test" message="Build with which test? (Press Enter to build all tests)"/>
						</else>
					</if>
				</then>
				<else>
					<property name="testfile" location="${test-src}/${test}.js"/>
					<property name="script-src-prefix-path" value="tests/"/>
					<property name="dist-filename-prefix" value="test-" />
				</else>
			</if>
			<if>
				<not><equals arg1="${test}" arg2="" /></not>
				<then>
					<!-- check if .js-file for given test is available (fail if not)-->
					<available file="${testfile}" type="file" property="testfileAvailable" value="true"/>
					<fail unless="testfileAvailable" message="Test not found. Make sure, that the desired test is located in the '${test-src}' (or util in '${util-src}') directory."/>
					
					<!-- create .wgt-file (include audio-data if needed) -->
					<condition property="isAudioMp3Only" value="true">
						<or>
							<!-- uses audiofiles to play them using launchApplication() -->
							<equals arg1="${test}" arg2="jil/Application"/>
							<equals arg1="${test}" arg2="jil/security/policy"/>
						</or>
					</condition>
					<condition property="isAudio" value="true">
						<equals arg1="${test}" arg2="jil/AudioPlayer"/>
					</condition>
					<condition property="isVideo" value="true">
						<equals arg1="${test}" arg2="jil/VideoPlayer"/>
					</condition>
					<!--<antcall target="createWgt" inheritall="true" />-->
				</then>
				<else>
					<antcall target="all"/>
				</else>
			</if>
    </target>

    <!-- When creating new tests, insert an antcall here in this target -->
	<target name="all" description="This target builds widgets for all tests." depends="-collectTestNames">
		<echo level="info">### Building all tests ###</echo>
		<for list="${test.names}" param="test.name" delimiter=";">
			<sequential>
				<antcall target="build">
					<param name="test" value="@{test.name}"/>
				</antcall>
			</sequential>
		</for>
	</target>

	<target name="emu" description="Builds and copies the test to the emulator" depends="build, -setFileNameForTest">
		<fail message='Please define your home! Use -Demulator.home="/home/myuser/emulator" from the commandline.' unless="emulator.home" />
		<unzip src="${dist}/${test.filename}.wgt" dest="${emulator.home}/widgets/${test.filename}"/>
	</target>

	<target name="emu_all" description="This target builds all widgets and copies them to the emulator."  depends="-collectTestNames">
		<for list="${test.names}" param="test.name" delimiter=";">
			<sequential>
				<antcall target="emu">
					<param name="test" value="@{test.name}"/>
				</antcall>
			</sequential>
		</for>
	</target>

    <target name="clean" description="removes temporary and distribution-folder">
        <delete dir="${dist}"/>
        <delete dir="${tmp}"/>
    </target>

    <target name="default" description="The default behaviour is to build a single test-widget.">
    	  <echo>
HELP:

Build a single test: ant -Dtest=&lt;testname&gt; (e.g. ant -Dtest=jil/File)
Build all tests: ant all
Build and copy to emulator: ant emu -Dtest=&lt;testname&gt; -Demulator.home="/home/myuser/emulator"
Build all tests and copy to emulator: ant emu_all -Demulator.home="/home/myuser/emulator"
    	  </echo>
        <antcall target="build" inheritall="true" />
    </target>

		<target name="emu_dir" description="Prints out a list that can be copied to dir.js of the emulator." depends="-collectTestNames">
			<var name="dir_js" value= "var g_widgets = [${line.separator}" />

			<for list="${test.names}" param="test.name" delimiter=";">
				<sequential>
					<var name="dir_js" value= "${dir_js}${line.separator}    'test-@{test.name}'," />
				</sequential>
			</for>

			<propertyregex property="dir_js2"
         input="${dir_js}"
         regexp="/"
         replace="-"
				 global="true" />

			<propertyregex property="dir_js2"
			   override="true"
         input="${dir_js2}"
         regexp=",$"
         replace="${line.separator}];" />
			<echo>${dir_js2}</echo>
	  </target>
</project>
